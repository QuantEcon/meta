name: Test Warning Check Action

on:
  push:
    branches: [ main ]
    paths:
      - '.github/actions/check-warnings/**'
      - 'test/check-warnings/**'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/actions/check-warnings/**'
      - 'test/check-warnings/**'
  workflow_dispatch:

jobs:
  test-clean-files:
    runs-on: ubuntu-latest
    name: Test with clean HTML files
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test action with clean files
        id: clean-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings/clean.html'
          fail-on-warning: 'false'
      
      - name: Verify clean results
        run: |
          echo "Warnings found: ${{ steps.clean-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.clean-test.outputs.warning-count }}"
          if [ "${{ steps.clean-test.outputs.warnings-found }}" != "false" ]; then
            echo "❌ Expected no warnings but found some"
            exit 1
          fi
          echo "✅ Clean test passed"

  test-files-with-warnings:
    runs-on: ubuntu-latest
    name: Test with HTML files containing warnings
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test action with files containing warnings
        id: warning-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings'
          fail-on-warning: 'false'
      
      - name: Verify warning results
        run: |
          echo "Warnings found: ${{ steps.warning-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.warning-test.outputs.warning-count }}"
          echo "Warning details: ${{ steps.warning-test.outputs.warning-details }}"
          if [ "${{ steps.warning-test.outputs.warnings-found }}" != "true" ]; then
            echo "❌ Expected warnings but found none"
            exit 1
          fi
          if [ "${{ steps.warning-test.outputs.warning-count }}" -lt "3" ]; then
            echo "❌ Expected at least 3 warnings but found ${{ steps.warning-test.outputs.warning-count }}"
            exit 1
          fi
          echo "✅ Warning test passed"

  test-fail-on-warning:
    runs-on: ubuntu-latest
    name: Test fail-on-warning functionality
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test that action fails when warnings found and fail-on-warning is true
        id: fail-test
        continue-on-error: true
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings/with-warnings.html'
          fail-on-warning: 'true'
      
      - name: Verify action failed
        run: |
          if [ "${{ steps.fail-test.outcome }}" != "failure" ]; then
            echo "❌ Expected action to fail but it succeeded"
            exit 1
          fi
          echo "✅ Fail-on-warning test passed"

  test-new-warning-types:
    runs-on: ubuntu-latest
    name: Test new warning types (UserWarning, RuntimeWarning, etc.)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test action with new warning types
        id: new-warning-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings/with-new-warnings.html'
          fail-on-warning: 'false'
      
      - name: Verify new warning types are detected
        run: |
          echo "Warnings found: ${{ steps.new-warning-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.new-warning-test.outputs.warning-count }}"
          echo "Warning details: ${{ steps.new-warning-test.outputs.warning-details }}"
          if [ "${{ steps.new-warning-test.outputs.warnings-found }}" != "true" ]; then
            echo "❌ Expected new warning types to be found but found none"
            exit 1
          fi
          if [ "${{ steps.new-warning-test.outputs.warning-count }}" -lt "5" ]; then
            echo "❌ Expected at least 5 new warning types but found ${{ steps.new-warning-test.outputs.warning-count }}"
            exit 1
          fi
          # Check that specific new warning types are detected
          if [[ "${{ steps.new-warning-test.outputs.warning-details }}" != *"UserWarning"* ]]; then
            echo "❌ UserWarning not detected"
            exit 1
          fi
          if [[ "${{ steps.new-warning-test.outputs.warning-details }}" != *"RuntimeWarning"* ]]; then
            echo "❌ RuntimeWarning not detected"
            exit 1
          fi
          if [[ "${{ steps.new-warning-test.outputs.warning-details }}" != *"ResourceWarning"* ]]; then
            echo "❌ ResourceWarning not detected"
            exit 1
          fi
          echo "✅ New warning types test passed"

  test-exclude-warning-single:
    runs-on: ubuntu-latest
    name: Test exclude-warning with single warning type
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test action with single warning exclusion
        id: exclude-single-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings/exclude-test.html'
          exclude-warning: 'UserWarning'
          fail-on-warning: 'false'
      
      - name: Verify single exclusion results
        run: |
          echo "Warnings found: ${{ steps.exclude-single-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.exclude-single-test.outputs.warning-count }}"
          echo "Warning details: ${{ steps.exclude-single-test.outputs.warning-details }}"
          
          # Should find warnings (DeprecationWarning, RuntimeWarning, ResourceWarning) but not UserWarning
          if [ "${{ steps.exclude-single-test.outputs.warnings-found }}" != "true" ]; then
            echo "❌ Expected warnings but found none after excluding UserWarning"
            exit 1
          fi
          
          # Should find 3 warnings (excluding UserWarning)
          if [ "${{ steps.exclude-single-test.outputs.warning-count }}" -ne "3" ]; then
            echo "❌ Expected 3 warnings but found ${{ steps.exclude-single-test.outputs.warning-count }}"
            exit 1
          fi
          
          # Should NOT contain UserWarning
          if [[ "${{ steps.exclude-single-test.outputs.warning-details }}" == *"UserWarning"* ]]; then
            echo "❌ UserWarning was found but should have been excluded"
            exit 1
          fi
          
          # Should contain other warnings
          if [[ "${{ steps.exclude-single-test.outputs.warning-details }}" != *"DeprecationWarning"* ]]; then
            echo "❌ DeprecationWarning not found"
            exit 1
          fi
          
          echo "✅ Single exclude-warning test passed"

  test-exclude-warning-multiple:
    runs-on: ubuntu-latest
    name: Test exclude-warning with multiple warning types
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test action with multiple warning exclusions
        id: exclude-multiple-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings/exclude-test.html'
          exclude-warning: 'UserWarning,RuntimeWarning'
          fail-on-warning: 'false'
      
      - name: Verify multiple exclusion results
        run: |
          echo "Warnings found: ${{ steps.exclude-multiple-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.exclude-multiple-test.outputs.warning-count }}"
          echo "Warning details: ${{ steps.exclude-multiple-test.outputs.warning-details }}"
          
          # Should find warnings (DeprecationWarning, ResourceWarning) but not UserWarning or RuntimeWarning
          if [ "${{ steps.exclude-multiple-test.outputs.warnings-found }}" != "true" ]; then
            echo "❌ Expected warnings but found none after excluding UserWarning and RuntimeWarning"
            exit 1
          fi
          
          # Should find 2 warnings (excluding UserWarning and RuntimeWarning)
          if [ "${{ steps.exclude-multiple-test.outputs.warning-count }}" -ne "2" ]; then
            echo "❌ Expected 2 warnings but found ${{ steps.exclude-multiple-test.outputs.warning-count }}"
            exit 1
          fi
          
          # Should NOT contain excluded warnings
          if [[ "${{ steps.exclude-multiple-test.outputs.warning-details }}" == *"UserWarning"* ]]; then
            echo "❌ UserWarning was found but should have been excluded"
            exit 1
          fi
          if [[ "${{ steps.exclude-multiple-test.outputs.warning-details }}" == *"RuntimeWarning"* ]]; then
            echo "❌ RuntimeWarning was found but should have been excluded"
            exit 1
          fi
          
          # Should contain non-excluded warnings
          if [[ "${{ steps.exclude-multiple-test.outputs.warning-details }}" != *"DeprecationWarning"* ]]; then
            echo "❌ DeprecationWarning not found"
            exit 1
          fi
          if [[ "${{ steps.exclude-multiple-test.outputs.warning-details }}" != *"ResourceWarning"* ]]; then
            echo "❌ ResourceWarning not found"
            exit 1
          fi
          
          echo "✅ Multiple exclude-warning test passed"

  test-exclude-warning-all:
    runs-on: ubuntu-latest
    name: Test exclude-warning excluding all warnings
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test action with all warnings excluded
        id: exclude-all-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings/exclude-test.html'
          exclude-warning: 'UserWarning,DeprecationWarning,RuntimeWarning,ResourceWarning'
          fail-on-warning: 'false'
      
      - name: Verify all exclusion results
        run: |
          echo "Warnings found: ${{ steps.exclude-all-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.exclude-all-test.outputs.warning-count }}"
          echo "Warning details: ${{ steps.exclude-all-test.outputs.warning-details }}"
          
          # Should find no warnings (all excluded)
          if [ "${{ steps.exclude-all-test.outputs.warnings-found }}" != "false" ]; then
            echo "❌ Expected no warnings but found some after excluding all"
            exit 1
          fi
          
          if [ "${{ steps.exclude-all-test.outputs.warning-count }}" -ne "0" ]; then
            echo "❌ Expected 0 warnings but found ${{ steps.exclude-all-test.outputs.warning-count }}"
            exit 1
          fi
          
          echo "✅ All exclude-warning test passed"

  test-exclude-warning-with-custom-warnings:
    runs-on: ubuntu-latest
    name: Test exclude-warning with custom warning list
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test action with custom warnings and exclusions
        id: exclude-custom-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings/exclude-test.html'
          warnings: 'UserWarning,DeprecationWarning,RuntimeWarning'
          exclude-warning: 'RuntimeWarning'
          fail-on-warning: 'false'
      
      - name: Verify custom warning exclusion results
        run: |
          echo "Warnings found: ${{ steps.exclude-custom-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.exclude-custom-test.outputs.warning-count }}"
          echo "Warning details: ${{ steps.exclude-custom-test.outputs.warning-details }}"
          
          # Should find UserWarning and DeprecationWarning but not RuntimeWarning or ResourceWarning
          if [ "${{ steps.exclude-custom-test.outputs.warnings-found }}" != "true" ]; then
            echo "❌ Expected warnings but found none with custom warnings and exclusion"
            exit 1
          fi
          
          # Should find 2 warnings (UserWarning, DeprecationWarning)
          if [ "${{ steps.exclude-custom-test.outputs.warning-count }}" -ne "2" ]; then
            echo "❌ Expected 2 warnings but found ${{ steps.exclude-custom-test.outputs.warning-count }}"
            exit 1
          fi
          
          # Should NOT contain RuntimeWarning or ResourceWarning
          if [[ "${{ steps.exclude-custom-test.outputs.warning-details }}" == *"RuntimeWarning"* ]]; then
            echo "❌ RuntimeWarning was found but should have been excluded"
            exit 1
          fi
          if [[ "${{ steps.exclude-custom-test.outputs.warning-details }}" == *"ResourceWarning"* ]]; then
            echo "❌ ResourceWarning was found but should not be in custom warning list"
            exit 1
          fi
          
          # Should contain UserWarning and DeprecationWarning
          if [[ "${{ steps.exclude-custom-test.outputs.warning-details }}" != *"UserWarning"* ]]; then
            echo "❌ UserWarning not found"
            exit 1
          fi
          if [[ "${{ steps.exclude-custom-test.outputs.warning-details }}" != *"DeprecationWarning"* ]]; then
            echo "❌ DeprecationWarning not found"
            exit 1
          fi
          
          echo "✅ Custom warning exclusion test passed"

  test-pr-mode-basic:
    runs-on: ubuntu-latest
    name: Test PR mode basic functionality
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test PR mode with non-git context (should fallback to normal mode)
        id: pr-mode-fallback-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings/lecture-with-warnings.html'
          pr-mode: 'true'
          fail-on-warning: 'false'
      
      - name: Verify fallback results
        run: |
          echo "Warnings found: ${{ steps.pr-mode-fallback-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.pr-mode-fallback-test.outputs.warning-count }}"
          
          # Should find warnings since it falls back to normal mode
          if [ "${{ steps.pr-mode-fallback-test.outputs.warnings-found }}" != "true" ]; then
            echo "❌ Expected warnings in fallback mode but found none"
            exit 1
          fi
          
          echo "✅ PR mode fallback test passed"

  test-pr-mode-simulation:
    runs-on: ubuntu-latest
    name: Test PR mode with simulated git environment
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup git for PR mode simulation
        run: |
          # Configure git
          git config user.email "test@example.com"
          git config user.name "Test User"
          
          # Fetch the main branch from origin so it exists locally
          git fetch origin main:main
          
          # Create a test scenario: commit current state, modify a .md file, then test
          git add -A
          git commit -m "Base state for PR mode test" || echo "Nothing to commit"
          
          # Create a feature branch
          git checkout -b test-pr-mode-branch
          
          # Modify one of our test .md files
          echo "# Updated Test Lecture" > test/check-warnings/lecture-with-warnings.md
          git add test/check-warnings/lecture-with-warnings.md
          git commit -m "Update test lecture"
          
          # Go back to main and then return to feature branch to simulate PR context
          git checkout main
          git checkout test-pr-mode-branch
      
      - name: Test PR mode with git context
        id: pr-mode-git-test
        uses: .//.github/actions/check-warnings
        with:
          html-path: './test/check-warnings'
          pr-mode: 'true'
          fail-on-warning: 'false'
        env:
          GITHUB_BASE_REF: 'main'
          GITHUB_EVENT_NAME: 'pull_request'
      
      - name: Verify git-based PR mode results
        run: |
          echo "Warnings found: ${{ steps.pr-mode-git-test.outputs.warnings-found }}"
          echo "Warning count: ${{ steps.pr-mode-git-test.outputs.warning-count }}"
          echo "Warning details: ${{ steps.pr-mode-git-test.outputs.warning-details }}"
          
          # Should find warnings only in the changed file (lecture-with-warnings.html)
          # The exact behavior depends on whether the HTML file mapping works
          # At minimum, it should run without errors
          
          echo "✅ PR mode git simulation test passed"