# Template workflow for repositories using the Code Style Checker Action
# Copy this file to your repository as .github/workflows/code-style-formatter.yml
# and it will trigger when someone comments '@quantecon-code-style' on a PR

name: Code Style Formatter
on:
  issue_comment:
    types: [created]

jobs:
  format-code:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '@quantecon-code-style')
    runs-on: ubuntu-latest
    
    steps:
    - name: Get PR information
      id: pr
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          core.setOutput('head-sha', pullRequest.head.sha);
          core.setOutput('head-ref', pullRequest.head.ref);
          core.setOutput('base-sha', pullRequest.base.sha);
          
          return pullRequest;
    
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ steps.pr.outputs.head-ref }}
        fetch-depth: 0
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: '**/*.md'
        base_sha: ${{ steps.pr.outputs.base-sha }}
        sha: ${{ steps.pr.outputs.head-sha }}
    
    - name: Check if any markdown files changed
      id: check-files
      run: |
        if [ -z "${{ steps.changed-files.outputs.all_changed_files }}" ]; then
          echo "no-files=true" >> $GITHUB_OUTPUT
          echo "No markdown files were changed in this PR"
        else
          echo "no-files=false" >> $GITHUB_OUTPUT
          echo "Changed markdown files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
        fi
    
    - name: Format MyST markdown files
      if: steps.check-files.outputs.no-files == 'false'
      id: format
      uses: QuantEcon/meta/.github/actions/code-style-checker@main
      with:
        files: ${{ steps.changed-files.outputs.all_changed_files }}
        check-myst-code-cells: 'true'
        check-markdown-blocks: 'true'
        python-languages: 'python,python3,ipython,ipython3'
        black-args: '--line-length=88'
        commit-files: 'true'
        git-user-name: 'GitHub Action'
        git-user-email: 'action@github.com'
    
    - name: Push changes
      if: steps.check-files.outputs.no-files == 'false' && steps.format.outputs.changes-made == 'true'
      run: |
        git push
        echo "Successfully pushed formatting changes"
    
    - name: Post comment with results
      uses: actions/github-script@v7
      with:
        script: |
          const noFiles = '${{ steps.check-files.outputs.no-files }}';
          const changesMade = '${{ steps.format.outputs.changes-made }}';
          const filesProcessed = '${{ steps.format.outputs.files-processed }}';
          const filesChanged = '${{ steps.format.outputs.files-changed }}';
          const blocksFormatted = '${{ steps.format.outputs.total-blocks-formatted }}';
          
          let body;
          
          if (noFiles === 'true') {
            body = [
              '## üîç Code Style Check Results',
              '',
              '‚úÖ **No markdown files were changed in this PR.**',
              '',
              'The code style checker found no markdown files to process.',
              '',
              '---',
              '',
              'ü§ñ *This comment was automatically generated by the [Code Style Formatter](https://github.com/QuantEcon/meta/.github/actions/code-style-checker).*'
            ].join('\n');
          } else if (changesMade === 'true') {
            body = [
              '## ‚úÖ Code Style Formatting Applied',
              '',
              `üéâ **Successfully applied black formatting to ${blocksFormatted} code block(s) across ${filesChanged} file(s).**`,
              '',
              '**Summary:**',
              `- **Files processed:** ${filesProcessed}`,
              `- **Files modified:** ${filesChanged}`,
              `- **Code blocks formatted:** ${blocksFormatted}`,
              '',
              '**Changes committed:**',
              '- Each modified file has been committed separately with a descriptive commit message',
              '- The formatting follows PEP8 standards using black',
              '',
              '**Languages processed:**',
              '- \`python\`, \`python3\`, \`ipython\`, \`ipython3\` code blocks',
              '- Both MyST \`{code-cell}\` directives and standard markdown fenced code blocks',
              '',
              '---',
              '',
              'ü§ñ *This comment was automatically generated by the [Code Style Formatter](https://github.com/QuantEcon/meta/.github/actions/code-style-checker).*'
            ].join('\n');
          } else {
            body = [
              '## ‚úÖ Code Style Check Completed',
              '',
              `üìù **Processed ${filesProcessed} markdown file(s) - no formatting changes needed.**`,
              '',
              'All Python code blocks in the changed markdown files are already properly formatted according to PEP8 standards.',
              '',
              '**Summary:**',
              `- **Files processed:** ${filesProcessed}`,
              '- **Files modified:** 0',
              '- **Code blocks formatted:** 0',
              '',
              '**Languages checked:**',
              '- \`python\`, \`python3\`, \`ipython\`, \`ipython3\` code blocks',
              '- Both MyST \`{code-cell}\` directives and standard markdown fenced code blocks',
              '',
              '---',
              '',
              'ü§ñ *This comment was automatically generated by the [Code Style Formatter](https://github.com/QuantEcon/meta/.github/actions/code-style-checker).*'
            ].join('\n');
          }
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: body
          });