name: QuantEcon Style Check (PR Mode)

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  style-check-pr:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '@qe-style-check')
    runs-on: ubuntu-latest
    name: Style Guide Check (PR Mode)
    
    steps:
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            core.setOutput('head-ref', pr.head.ref);
            core.setOutput('head-sha', pr.head.sha);
            core.setOutput('base-ref', pr.base.ref);
            
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.head-ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: React to comment
        uses: actions/github-script@v7
        with:
          script: |
            // Add reaction to show we're processing
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });
      
      - name: Run QuantEcon Style Check
        id: style-check
        uses: .//.github/actions/qe-style-check
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'pr'
          lectures: 'lectures'
          confidence-threshold: 'high'
        env:
          GITHUB_BASE_REF: ${{ steps.pr-info.outputs.base-ref }}
          GITHUB_HEAD_REF: ${{ steps.pr-info.outputs.head-ref }}
      
      - name: Apply high confidence changes
        if: steps.style-check.outputs.suggestions-found == 'true' && steps.style-check.outputs.high-confidence-count > 0
        id: apply-changes
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "QuantEcon Style Checker"
          
          # Note: The actual file modifications would be implemented in the style-check.sh script
          # For now, we'll just indicate that changes would be applied
          echo "Would apply ${{ steps.style-check.outputs.high-confidence-count }} high confidence changes"
          
          # Check if there are any changes to commit
          if ! git diff --quiet; then
            git add .
            git commit -m "üé® Apply QuantEcon style guide suggestions (high confidence)

Applied ${{ steps.style-check.outputs.high-confidence-count }} high confidence style improvements:
- Greek letter variable names (Œ±, Œ≤, Œ≥, etc.)
- Proper transpose notation (^\\top)
- Matplotlib title removal
- Other formatting fixes

Generated by: @qe-style-check"
            git push origin ${{ steps.pr-info.outputs.head-ref }}
            echo "changes-committed=true" >> $GITHUB_OUTPUT
          else
            echo "changes-committed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create style check summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const suggestionsFound = '${{ steps.style-check.outputs.suggestions-found }}' === 'true';
            const highCount = parseInt('${{ steps.style-check.outputs.high-confidence-count }}');
            const mediumCount = parseInt('${{ steps.style-check.outputs.medium-confidence-count }}');
            const lowCount = parseInt('${{ steps.style-check.outputs.low-confidence-count }}');
            const filesProcessed = parseInt('${{ steps.style-check.outputs.files-processed }}');
            const changesCommitted = '${{ steps.apply-changes.outputs.changes-committed }}' === 'true';
            
            let body = '## üé® QuantEcon Style Guide Check Results\n\n';
            
            if (!suggestionsFound) {
              body += '‚úÖ **Excellent!** All files comply with the QuantEcon Style Guide.\n\n';
              body += `üìä **Summary:** ${filesProcessed} files processed, no issues found.\n\n`;
            } else {
              body += `üìä **Summary:** ${filesProcessed} files processed\n\n`;
              
              if (highCount > 0) {
                if (changesCommitted) {
                  body += `‚ú® **Applied ${highCount} high confidence suggestions** and committed changes to this PR.\n\n`;
                } else {
                  body += `üîß **${highCount} high confidence suggestions** ready to apply (would be auto-committed in production).\n\n`;
                }
              }
              
              if (mediumCount > 0 || lowCount > 0) {
                body += 'üìã **Additional Suggestions:**\n\n';
                body += '| Confidence | Count | Description |\n';
                body += '|------------|-------|-------------|\n';
                if (mediumCount > 0) {
                  body += `| Medium | ${mediumCount} | Likely improvements that may need review |\n`;
                }
                if (lowCount > 0) {
                  body += `| Low | ${lowCount} | Suggestions that need human review |\n`;
                }
                body += '\n';
              }
              
              // Add detailed report in a collapsible section
              const detailedReport = ${{ toJSON(steps.style-check.outputs.detailed-report) }};
              if (detailedReport && detailedReport.trim()) {
                body += '<details>\n<summary>üìù Detailed Style Suggestions</summary>\n\n';
                body += detailedReport;
                body += '\n</details>\n\n';
              }
            }
            
            body += '---\n\n';
            body += `üîç **Triggered by:** @${context.payload.comment.user.login} in [comment](${context.payload.comment.html_url})\n`;
            body += `‚ö° **Workflow:** [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            body += `üìã **Style Guide:** Uses the [QuantEcon Style Guide](${context.payload.repository.html_url}/blob/main/.github/copilot-qe-style-guide.md)\n\n`;
            body += '*This comment was automatically generated by the QuantEcon Style Checker.*';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
      
      - name: Add final reaction
        uses: actions/github-script@v7
        with:
          script: |
            const suggestionsFound = '${{ steps.style-check.outputs.suggestions-found }}' === 'true';
            const reaction = suggestionsFound ? 'confused' : 'hooray';
            
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: reaction
            });
      
      - name: Fail if critical issues found
        if: steps.style-check.outputs.suggestions-found == 'true' && steps.style-check.outputs.high-confidence-count > 5
        run: |
          echo "::warning::Found many high confidence style issues (${{ steps.style-check.outputs.high-confidence-count }})"
          echo "Consider reviewing the QuantEcon Style Guide for common patterns"
          # Note: Not failing the workflow to allow for iterative improvements