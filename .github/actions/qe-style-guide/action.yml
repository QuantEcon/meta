name: 'QuantEcon Style Guide Check'
description: 'AI-powered style guide checking and suggestions for QuantEcon content'
author: 'QuantEcon'

inputs:
  github-token:
    description: 'GitHub token with repository access'
    required: true
  style-guide:
    description: 'Path or URL to the style guide document'
    required: false
    default: '.github/copilot-qe-style-guide.md'
  docs:
    description: 'Directory containing documents to check'
    required: false
    default: 'lectures/'
  extensions:
    description: 'File extensions to check (comma-separated)'
    required: false
    default: 'md'
  openai-api-key:
    description: 'OpenAI API key for AI-powered style checking'
    required: false
    default: ''
  model:
    description: 'AI model to use for style checking'
    required: false
    default: 'gpt-4'
  max-suggestions:
    description: 'Maximum number of suggestions to make per file'
    required: false
    default: '20'
  confidence-threshold:
    description: 'Confidence threshold for auto-applying changes in PR mode (0.0-1.0)'
    required: false
    default: '0.8'

outputs:
  files-processed:
    description: 'Number of files processed'
    value: ${{ steps.style-check.outputs.files-processed }}
  suggestions-count:
    description: 'Total number of style suggestions made'
    value: ${{ steps.style-check.outputs.suggestions-count }}
  pr-url:
    description: 'URL of the created pull request (issue mode only)'
    value: ${{ steps.create-pr.outputs.pr-url }}
  commit-sha:
    description: 'SHA of the commit with style changes (PR mode only)'
    value: ${{ steps.commit-changes.outputs.commit-sha }}
  summary:
    description: 'Summary of changes made'
    value: ${{ steps.style-check.outputs.summary }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      shell: bash
      run: |
        pip install requests openai gitpython

    - name: Process style check request
      id: style-check
      shell: bash
      run: ${{ github.action_path }}/process_style_check.py
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_STYLE_GUIDE: ${{ inputs.style-guide }}
        INPUT_DOCS: ${{ inputs.docs }}
        INPUT_EXTENSIONS: ${{ inputs.extensions }}
        INPUT_OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        INPUT_MODEL: ${{ inputs.model }}
        INPUT_MAX_SUGGESTIONS: ${{ inputs.max-suggestions }}
        INPUT_CONFIDENCE_THRESHOLD: ${{ inputs.confidence-threshold }}
        GITHUB_CONTEXT: ${{ toJSON(github) }}

    - name: Create pull request
      id: create-pr
      if: steps.style-check.outputs.mode == 'issue' && steps.style-check.outputs.changes-made == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const changesFile = '${{ steps.style-check.outputs.changes-file }}';
          const changes = JSON.parse(fs.readFileSync(changesFile, 'utf8'));
          
          // Create a new branch for the style changes
          const branchName = `style-guide-suggestions-${new Date().getTime()}`;
          const baseBranch = context.payload.repository.default_branch;
          
          // Get the base commit SHA
          const { data: baseRef } = await github.rest.git.getRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `heads/${baseBranch}`
          });
          
          // Create new branch
          await github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/heads/${branchName}`,
            sha: baseRef.object.sha
          });
          
          // Apply changes to files
          for (const change of changes.fileChanges) {
            const { data: fileData } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: change.path,
              ref: branchName
            });
            
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: change.path,
              message: `Apply style guide suggestions to ${change.path}`,
              content: Buffer.from(change.content).toString('base64'),
              sha: fileData.sha,
              branch: branchName
            });
          }
          
          // Create pull request
          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Style Guide Suggestions for ${changes.targetFile}`,
            head: branchName,
            base: baseBranch,
            body: changes.summary
          });
          
          core.setOutput('pr-url', pr.html_url);
          
          // Comment on the original issue
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `üìù Style guide review completed! Created PR ${pr.html_url} with suggestions for \`${changes.targetFile}\`.`
          });

    - name: Commit changes to PR
      id: commit-changes
      if: steps.style-check.outputs.mode == 'pr' && steps.style-check.outputs.changes-made == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const changesFile = '${{ steps.style-check.outputs.changes-file }}';
          const changes = JSON.parse(fs.readFileSync(changesFile, 'utf8'));
          
          // Apply changes to files in the current PR
          for (const change of changes.fileChanges) {
            const { data: fileData } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: change.path,
              ref: context.payload.pull_request.head.sha
            });
            
            const { data: commit } = await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: change.path,
              message: `Apply high-confidence style guide suggestions`,
              content: Buffer.from(change.content).toString('base64'),
              sha: fileData.sha,
              branch: context.payload.pull_request.head.ref
            });
            
            core.setOutput('commit-sha', commit.commit.sha);
          }
          
          // Comment on the PR with summary
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: changes.summary
          });

branding:
  icon: 'edit-3'
  color: 'blue'