name: 'Check for Python Warnings'
description: 'Scan HTML files for Python warnings within code cell outputs (avoiding false positives from text content)'
author: 'QuantEcon'

inputs:
  html-path:
    description: 'Path to directory containing HTML files to scan'
    required: false
    default: '.'
  warnings:
    description: 'Comma-separated list of warnings to check for'
    required: false
    default: 'UserWarning,DeprecationWarning,PendingDeprecationWarning,SyntaxWarning,RuntimeWarning,FutureWarning,ImportWarning,UnicodeWarning,BytesWarning,ResourceWarning,EncodingWarning'
  exclude-warning:
    description: 'Comma-separated list of warnings to exclude from checking (can be a single warning or multiple warnings)'
    required: false
    default: ''
  fail-on-warning:
    description: 'Whether to fail the workflow if warnings are found'
    required: false
    default: 'true'
  create-issue:
    description: 'Whether to create a GitHub issue when warnings are found'
    required: false
    default: 'false'
  issue-title:
    description: 'Title for the GitHub issue when warnings are found'
    required: false
    default: 'Python Warnings Found in Documentation Build'
  create-artifact:
    description: 'Whether to create a workflow artifact with the warning report'
    required: false
    default: 'false'
  artifact-name:
    description: 'Name for the workflow artifact containing the warning report'
    required: false
    default: 'warning-report'
  notify:
    description: 'GitHub username(s) to assign to the created issue (comma-separated for multiple users)'
    required: false
    default: ''
  pr-mode:
    description: 'When enabled, only check HTML files corresponding to changed .md files in the PR (requires git repository context)'
    required: false
    default: 'false'

outputs:
  warnings-found:
    description: 'Whether warnings were found (true/false)'
    value: ${{ steps.check.outputs.warnings-found }}
  warning-count:
    description: 'Number of warnings found'
    value: ${{ steps.check.outputs.warning-count }}
  warning-details:
    description: 'Details of warnings found'
    value: ${{ steps.check.outputs.warning-details }}
  issue-url:
    description: 'URL of the created GitHub issue (if create-issue is enabled)'
    value: ${{ steps.create-issue.outputs.issue-url }}
  artifact-path:
    description: 'Path to the created artifact file (if create-artifact is enabled)'
    value: ${{ steps.create-artifact.outputs.artifact-path }}

runs:
  using: 'composite'
  steps:
    - name: Check for warnings
      id: check
      shell: bash
      env:
        INPUT_HTML_PATH: ${{ inputs.html-path }}
        INPUT_WARNINGS: ${{ inputs.warnings }}
        INPUT_EXCLUDE_WARNING: ${{ inputs.exclude-warning }}
        INPUT_FAIL_ON_WARNING: ${{ inputs.fail-on-warning }}
        INPUT_PR_MODE: ${{ inputs.pr-mode }}
      run: |
        # Run the check-warnings script
        ${{ github.action_path }}/check-warnings.sh

    - name: Post PR comment with warning report
      if: inputs.fail-on-warning == 'true' && steps.check.outputs.warnings-found == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const warningCount = '${{ steps.check.outputs.warning-count }}';
          const detailedReport = ${{ toJSON(steps.check.outputs.detailed-report) }};
          
          const body = [
            '## ⚠️ Python Warnings Detected',
            '',
            '🚨 **' + warningCount + ' Python warning(s)** were found in the HTML output during the documentation build.',
            '',
            '**Build Details:**',
            '- **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})',
            '- **Commit:** ${{ github.sha }}',
            '- **Date:** ' + new Date().toISOString(),
            '',
            '---',
            '',
            detailedReport,
            '',
            '---',
            '',
            '**Next Steps:**',
            '1. Review the warnings listed above',
            '2. Fix the underlying code that\'s generating these warnings',
            '3. Push the changes to update this PR',
            '',
            '📝 *This comment was automatically generated by the [Check for Python Warnings Action](https://github.com/QuantEcon/meta/.github/actions/check-warnings).*'
          ].join('\n');
          
          try {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
            console.log('Posted PR comment with warning details');
          } catch (error) {
            console.error('Failed to create PR comment:', error);
            core.setFailed('Failed to create PR comment: ' + error.message);
          }

    - name: Fail workflow on warnings
      if: inputs.fail-on-warning == 'true' && steps.check.outputs.warnings-found == 'true'
      shell: bash
      run: |
        echo "Failing workflow due to warnings found"
        exit 1

    - name: Create artifact with warning report
      id: create-artifact
      if: inputs.create-artifact == 'true' && steps.check.outputs.warnings-found == 'true'
      shell: bash
      run: |
        ARTIFACT_NAME="${{ inputs.artifact-name }}"
        ARTIFACT_FILE="$ARTIFACT_NAME.md"
        CURRENT_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        # Create the report file
        {
          echo "# Python Warning Report"
          echo ""
          echo "**Date:** $CURRENT_DATE"
          echo "**Repository:** ${{ github.repository }}"
          echo "**Workflow:** ${{ github.workflow }}"
          echo "**Run ID:** ${{ github.run_id }}"
          echo "**Total Warnings Found:** ${{ steps.check.outputs.warning-count }}"
          echo ""
          echo "---"
          echo ""
          echo "${{ steps.check.outputs.detailed-report }}"
          echo ""
          echo "---"
          echo ""
          echo "Generated by [Check for Python Warnings Action](https://github.com/QuantEcon/meta/.github/actions/check-warnings)"
        } > "$ARTIFACT_FILE"
        
        echo "artifact-path=$ARTIFACT_FILE" >> $GITHUB_OUTPUT
        echo "Created warning report artifact: $ARTIFACT_FILE"

    - name: Upload warning report artifact
      if: inputs.create-artifact == 'true' && steps.check.outputs.warnings-found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ steps.create-artifact.outputs.artifact-path }}
        retention-days: 30

    - name: Create GitHub issue
      id: create-issue
      if: inputs.create-issue == 'true' && steps.check.outputs.warnings-found == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const warningCount = '${{ steps.check.outputs.warning-count }}';
          const detailedReport = ${{ toJSON(steps.check.outputs.detailed-report) }};
          const title = '${{ inputs.issue-title }}';
          const notify = '${{ inputs.notify }}';
          
          const body = [
            '# Python Warnings Detected',
            '',
            '🚨 **' + warningCount + ' Python warning(s)** were found in the HTML output during the documentation build.',
            '',
            '**Details:**',
            '- **Repository:** ${{ github.repository }}',
            '- **Workflow:** ${{ github.workflow }}',
            '- **Run ID:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})',
            '- **Commit:** ${{ github.sha }}',
            '- **Branch:** ${{ github.ref_name }}',
            '- **Date:** ' + new Date().toISOString(),
            '',
            '---',
            '',
            detailedReport,
            '',
            '---',
            '',
            '**Next Steps:**',
            '1. Review the warnings listed above',
            '2. Fix the underlying code that\'s generating these warnings',
            '3. Re-run the build to verify the warnings are resolved',
            '',
            '**Note:** This issue was automatically created by the [Check for Python Warnings Action](https://github.com/QuantEcon/meta/.github/actions/check-warnings).',
            '',
            'Please close this issue once all warnings have been addressed.'
          ].join('\n');
          
          try {
            const response = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'execution', 'python-warnings']
            });
            
            const issueUrl = response.data.html_url;
            const issueNumber = response.data.number;
            console.log('Created issue: ' + issueUrl);
            core.setOutput('issue-url', issueUrl);
            
            // Assign users to the issue if notify parameter is provided
            if (notify && notify.trim()) {
              try {
                // Parse comma-separated usernames and clean them
                const assignees = notify.split(',')
                  .map(username => username.trim())
                  .filter(username => username.length > 0);
                
                if (assignees.length > 0) {
                  console.log('Assigning issue to users: ' + assignees.join(', '));
                  
                  await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    assignees: assignees
                  });
                  
                  console.log('Successfully assigned issue to: ' + assignees.join(', '));
                }
              } catch (assignError) {
                console.error('Failed to assign users to issue:', assignError);
                // Don't fail the entire workflow for assignment errors
                console.log('Issue was created successfully, but assignment failed. Users may need to be assigned manually.');
              }
            }
            
            return issueUrl;
          } catch (error) {
            console.error('Failed to create issue:', error);
            core.setFailed('Failed to create issue: ' + error.message);
          }

    - name: Post simple PR comment linking to issue
      if: inputs.create-issue == 'true' && steps.check.outputs.warnings-found == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const warningDetails = ${{ toJSON(steps.check.outputs.warning-details) }};
          const issueUrl = '${{ steps.create-issue.outputs.issue-url }}';
          
          // Extract file names from warning details
          const files = [];
          const lines = warningDetails.split('\n');
          for (const line of lines) {
            if (line.includes(': ') && line.includes('instance(s) of')) {
              const fileName = line.split(':')[0].trim();
              if (fileName && !files.includes(fileName)) {
                files.push(fileName);
              }
            }
          }
          
          const fileList = files.map(file => `- ${file}`).join('\n');
          
          const body = [
            'There were code execution warnings found in the following files:',
            '',
            fileList,
            '',
            `For further details please check ${issueUrl}`,
            '',
            'Note: This issue was automatically created by the [Check for Python Warnings Action](https://github.com/QuantEcon/meta/.github/actions/check-warnings).'
          ].join('\n');
          
          try {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
            console.log('Posted simple PR comment linking to issue');
          } catch (error) {
            console.error('Failed to create PR comment:', error);
            core.setFailed('Failed to create PR comment: ' + error.message);
          }

branding:
  icon: 'alert-triangle'
  color: 'orange'